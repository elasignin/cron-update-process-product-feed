package com.ingramcontent.indiepub.utility;

import java.util.Iterator;
import java.util.Map;
import java.util.HashMap;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.kie.api.runtime.process.ProcessContext;
import org.kie.api.runtime.process.WorkflowProcessInstance;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.ingramcontent.indiepub.model.ProcessProductFeed;

/**
 * This class was automatically generated by the data modeler tool.
 */

public class ContextUtility implements java.io.Serializable {

    static final long serialVersionUID = 1L;

    public ContextUtility() {
    }
    
    public static Object getProcessVariable(ProcessContext context, String variable) {
		WorkflowProcessInstance instance = (WorkflowProcessInstance) context.getProcessInstance();
		return instance.getVariable(variable);		
	}
    
    public static void setProcessVariable(ProcessContext context, String variable, Object obj) {
		WorkflowProcessInstance instance = (WorkflowProcessInstance) context.getProcessInstance();
		instance.setVariable(variable, obj);
	}
	
	public static void initializeCronMetadata(ProcessContext context, JSONArray jsonArray, int index) throws JsonProcessingException  {
		
		if (jsonArray == null || jsonArray.size() == 0) {
			return;
		}
        
	    Iterator<JSONObject> i = jsonArray.iterator();
	    ProcessProductFeed processProductFeed = new ProcessProductFeed();
 
	    // take each value from the json array separately
	    while (i.hasNext()) {
	        JSONObject jsonObject = i.next();
	        updateVariable(context, jsonObject, index, processProductFeed);
	    }
	}
	
	private static void updateVariable(ProcessContext context, 
                                       JSONObject jsonObject,
                                       int index,
                                       ProcessProductFeed processProductFeed)  {
    	
    	if(jsonObject == null) {
    		return;
    	}
    	
    	String key = (String)jsonObject.get("parameterName");
    	String value = (String)jsonObject.get("parameterValue");
    	
    	switch (key) {
			case "indiepubProcessProductFeedUrl":
				setProcessVariable(context, "indiepubProcessProductFeedUrl", value);
			break;
			default:
			   String param = "cronIndiepubProcessProductFeed_" + index;
			   if(param.equalsIgnoreCase(key)) {
			      boolean run = "Y".equalsIgnoreCase(value); 
				  setProcessVariable(context, "cronIndiepubProcessProductFeed", run);
			   }
			   
			   param = "processProductFeedTypeId_" + index;
			   if(param.equalsIgnoreCase(key)) {
			      processProductFeed.setFeedTypeId(Integer.parseInt(value));
				  setProcessVariable(context, "processProductFeed", processProductFeed);
			   }
			break;
		}
    	
    }
    

}